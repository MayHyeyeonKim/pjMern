{"ast":null,"code":"var _jsxFileName = \"/Users/hyeyeonkim/Desktop/pj_mern/client/src/Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Test(props) {\n  _s();\n  const [Temp, setTemp] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [Temp ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"test\",\n      children: \" Test comp!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 15\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {},\n      children: \"Increase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Test, \"uzJW2z01FaPW1GeudPaKmcmrhyw=\");\n_c = Test;\nexport default Test;\n\n/* <div style={{ color: \"yellow\" }}>\n      <h1 className=\"test\">\n        Test 컴포넌트 입니다\n        <br />\n        {Temp}\n        {Arr.map((ele, idx) => {\n          return (\n            <div key={idx}>\n              <p>{ele}</p>\n              <p>{idx}</p>\n            </div>\n          );\n        })}\n      </h1>\n    </div> */\n\n// useState 배열이 올 때\n\n// function Test(_props) {\n//     const [Temp, setTemp] = useState([]);\n//     const [Number, setNumber] = useState(0);\n//     return (\n//       <>\n//         <h1 className=\"test\"> Test component!</h1>\n//         <p>버튼을 눌러봐</p>\n//         {Temp.map((ele, idx) => {\n//           return <p key={idx}>{ele}</p>;\n//         })}\n//         <button\n//           onClick={() => {\n//             let arr = []; //빈배열 arr을 선언\n//             arr = [...Temp]; //스프레드신택스 사용해서 복사 -> arr배열에 할당 (arr배열은 Temp배열의 요소 가지게 됨)\n//             arr.push(Number); //Number변수를 arr에 추가\n//             setNumber(Number + 1); //1씩 증가하게 상태없뎃\n//             setTemp([...arr]); //여기 arr이 와도 되던데...\n//           }}\n//         >\n//           증가\n//         </button>\n//       </>\n//     );\n//   }\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Test","props","_s","Temp","setTemp","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/hyeyeonkim/Desktop/pj_mern/client/src/Test.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction Test(props) {\n  const [Temp, setTemp] = useState(false);\n  return (\n    <>\n      {/*     \n        Temp의 값이 참: h1 tag 보여주기\n        Temp의 값이 거짓: h1 tag 숨겨주기\n        btn 클릭할 때마다: Temp의 값 반전되기!\n     */}\n      {Temp ? <h1 className=\"test\"> Test comp!</h1> : null}\n\n      <button onClick={() => {}}>Increase</button>\n    </>\n  );\n}\n\nexport default Test;\n\n/* <div style={{ color: \"yellow\" }}>\n      <h1 className=\"test\">\n        Test 컴포넌트 입니다\n        <br />\n        {Temp}\n        {Arr.map((ele, idx) => {\n          return (\n            <div key={idx}>\n              <p>{ele}</p>\n              <p>{idx}</p>\n            </div>\n          );\n        })}\n      </h1>\n    </div> */\n\n// useState 배열이 올 때\n\n// function Test(_props) {\n//     const [Temp, setTemp] = useState([]);\n//     const [Number, setNumber] = useState(0);\n//     return (\n//       <>\n//         <h1 className=\"test\"> Test component!</h1>\n//         <p>버튼을 눌러봐</p>\n//         {Temp.map((ele, idx) => {\n//           return <p key={idx}>{ele}</p>;\n//         })}\n//         <button\n//           onClick={() => {\n//             let arr = []; //빈배열 arr을 선언\n//             arr = [...Temp]; //스프레드신택스 사용해서 복사 -> arr배열에 할당 (arr배열은 Temp배열의 요소 가지게 됨)\n//             arr.push(Number); //Number변수를 arr에 추가\n//             setNumber(Number + 1); //1씩 증가하게 상태없뎃\n//             setTemp([...arr]); //여기 arr이 와도 되던데...\n//           }}\n//         >\n//           증가\n//         </button>\n//       </>\n//     );\n//   }\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACvC,oBACEE,OAAA,CAAAE,SAAA;IAAAM,QAAA,GAMGF,IAAI,gBAAGN,OAAA;MAAIS,SAAS,EAAC,MAAM;MAAAD,QAAA,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,GAAG,IAAI,eAEpDb,OAAA;MAAQc,OAAO,EAAEA,CAAA,KAAM,CAAC,CAAE;MAAAN,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC5C,CAAC;AAEP;AAACR,EAAA,CAdQF,IAAI;AAAAY,EAAA,GAAJZ,IAAI;AAgBb,eAAeA,IAAI;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}